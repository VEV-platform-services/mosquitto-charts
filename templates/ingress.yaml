apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Chart.Name }}
  namespace: emobility
  labels:
    {{- include "labels" . | nindent 4 }}
  annotations:
    alb.ingress.kubernetes.io/group.name: emobility
    alb.ingress.kubernetes.io/group.order: '10'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}, {"HTTP": 80}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/success-codes: '200'
{{/*    alb.ingress.kubernetes.io/healthcheck-path: /health-check?probe=readiness*/}}
{{/*    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '10'*/}}
{{/*    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'*/}}
{{/*    alb.ingress.kubernetes.io/healthcheck-unhealthy-threshold-count: '1'*/}}
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/certificate-arn: {{ .Values.ingress.certificateArn }}
    # Enable access logs to S3 if a bucket is provided
    # Set idle timeout to 75 seconds which is 5 second less than configured keep-alive timeout (https://github.com/VEV-platform-services/vev-server/issues/386)
    alb.ingress.kubernetes.io/load-balancer-attributes: access_logs.s3.enabled={{- if .Values.ingress.access_logs_bucket }}true{{- else }}false{{- end }},access_logs.s3.bucket={{ .Values.ingress.access_logs_bucket }},access_logs.s3.prefix=emobility,idle_timeout.timeout_seconds=75 # heartbeats(ping/pong) to keep the connections active
    alb.ingress.kubernetes.io/target-type: ip # to ensure the requests are been handled by same backend. (the default instance target-type NOT WORK!!!)
    alb.ingress.kubernetes.io/target-group-attributes: load_balancing.algorithm.type=least_outstanding_requests,stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=60 # ou need to enable stickiness on target group to ensure the requests are been handled by same backend

spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /mqtt*
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ $.Chart.Name }}
                port:
                  number: 8080
